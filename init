#!/bin/sh
# An init script for initramfs, for loading a system with tuxonice and a
# dm-crypt encrypted swap device.
#
# Based upon a script from: http://www.disciplina.net/howto/initscript

PATH="/bin:/sbin:/usr/bin:/usr/sbin"

mount -n -t proc none /proc
mount -n -t sysfs none /sys
CMDLINE=`cat /proc/cmdline`

for param in $CMDLINE ; do
	case "$param" in
		root=*|init=*)
			eval "$param"
			;;
		rescue)
			rescue="y"
			;;
	esac
done 

if [ -z "$root" ]; then
	echo "No root filesystem specified"
	echo "Please append a correct \"root=\" boot option"
	echo "Dropping you to a limited shell."
	echo "press CTRL-ALT-Del for reboot"
	exec /bin/sh
fi

# populate /dev with meaningful stuff
echo "initramfs: scanning for device nodes"
mdev -s

echo "initramfs: finding lvm devices" 
/sbin/vgscan 
echo "initramfs: activating lvm devices" 
/sbin/vgchange -ay
echo "initramfs: creating crypt-swap" 
# boot up will halt here until a key is typed in
if [ ! -e /dev/mapper/vg0-swap ]; then
	echo "Could not find swap device to resume from."
	echo "Dumping you to a shell to fix this."
	exec /bin/sh
fi
/bin/cryptsetup luksOpen crypt-swap /dev/mapper/vg0-swap

# make sure we resume here, before we mount our root device
echo "initramfs: activating tuxonice"
echo swap:/dev/mapper/vg0-swap > /sys/power/tuxonice/resume
echo 1 > /sys/power/tuxonice/do_resume

echo "initramfs: mounting root device: $root" 
mount -n $root /root -o ro

echo "initramfs: umounting /sys and /proc"  
umount -f /sys /proc

if [ -n "$rescue" ]; then
	echo "Going to a rescue shell."
	exec /bin/sh
fi

echo "changing to $root and hand over to init" 
exec run-init /root /sbin/init "$@"

# vim: set ft=sh tw=78:
